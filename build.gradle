plugins {
	id "java"
	id "org.springframework.boot" version "3.2.5"
	id "io.spring.dependency-management" version "1.1.4"
	id "jacoco"
}

group = "br.com.maurigvs"
version = "4.0.0-SNAPSHOT"

java {
	sourceCompatibility = "17"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-webflux"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-validation"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0"

    compileOnly "org.projectlombok:lombok"
	developmentOnly "org.springframework.boot:spring-boot-devtools"
	runtimeOnly "com.h2database:h2"
	runtimeOnly "org.postgresql:postgresql"
    annotationProcessor "org.projectlombok:lombok"

	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "io.projectreactor:reactor-test"
}

tasks.named("test") {
	useJUnitPlatform()
}

tasks.withType(Test).configureEach {
	finalizedBy jacocoTestReport
	jacoco {
		enabled = true
		destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
		classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
	}
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
}

jacocoTestCoverageVerification {
	violationRules {
		enabled = true
		rule {
			element = 'PACKAGE'

			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.80

			}
		}
		rule {
			element = 'CLASS'
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 50
			}
			limit {
				counter = 'INSTRUCTION'
				value = 'TOTALCOUNT'
				maximum = 200
			}
		}
		rule {
			element = 'METHOD'
			limit {
				counter = 'COMPLEXITY'
				value = 'TOTALCOUNT'
				maximum = 5
			}
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 10
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification